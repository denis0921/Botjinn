import logging
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from collections import defaultdict
import asyncio
import os

API_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

user_data = defaultdict(lambda: {
    "balance": 0,
    "level": 1,
    "taps": 0,
    "last_reset": None
})

# –ö–Ω–æ–ø–∫–∞ "–¢–∞–ø–Ω—É—Ç—å"
tap_kb = ReplyKeyboardMarkup(resize_keyboard=True)
tap_kb.add(KeyboardButton("üëÜ –¢–∞–ø–Ω—É—Ç—å"))

@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Crypto Jinn TapBot!\n"
        "–ù–∞–∂–∏–º–∞–π üëÜ '–¢–∞–ø–Ω—É—Ç—å', —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –º–æ–Ω–µ—Ç—ã.",
        reply_markup=tap_kb
    )

@dp.message_handler(lambda message: message.text == "üëÜ –¢–∞–ø–Ω—É—Ç—å")
async def tap_handler(message: types.Message):
    user = user_data[message.from_user.id]
    if user["taps"] >= 1000:
        await message.answer("‚ö†Ô∏è –õ–∏–º–∏—Ç 1000 —Ç–∞–ø–æ–≤ –≤ —á–∞—Å –∏—Å—á–µ—Ä–ø–∞–Ω. –ñ–¥–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.")
        return
    user["balance"] += 1
    user["taps"] += 1
    await message.answer(f"üòÑ –¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª 1 –º–æ–Ω–µ—Ç—É!\nüí∞ –ë–∞–ª–∞–Ω—Å: {user['balance']}\nüìà –£—Ä–æ–≤–µ–Ω—å: {user['level']}")

@dp.message_handler(commands=["level"])
async def level_handler(message: types.Message):
    user = user_data[message.from_user.id]
    next_level_cost = int(user["balance"] * 0.35)
    if user["balance"] >= next_level_cost:
        user["balance"] -= next_level_cost
        user["level"] += 1
        await message.answer(
            f"üöÄ –¢—ã –ø–æ–≤—ã—Å–∏–ª —É—Ä–æ–≤–µ–Ω—å!\nüìà –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: {user['level']}\nüí∞ –ë–∞–ª–∞–Ω—Å: {user['balance']}"
        )
    else:
        await message.answer(
            f"‚ùå –ù—É–∂–Ω–æ {next_level_cost} –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è.\nüí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user['balance']}"
        )

async def reset_taps():
    while True:
        await asyncio.sleep(3600)
        for user in user_data.values():
            user["taps"] = 0

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(reset_taps())
    executor.start_polling(dp, skip_updates=True)

